# Energia CC13xx Core and platform.
# ------------------------------
#
# For more info:
# https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5-3rd-party-Hardware-specification

name=Energia CC13xx (32-bits) Boards
version=1.2.1

# CC13xx compile variables
# ----------------------

compiler.warning_flags=-w
compiler.warning_flags.none=-w
compiler.warning_flags.default=
compiler.warning_flags.more=-Wall
compiler.warning_flags.all=-Wall -Wextra

compiler.path={runtime.tools.arm-none-eabi-gcc.path}/bin/
compiler.c.cmd=arm-none-eabi-gcc
compiler.c.flags=-c -g -Os {compiler.warning_flags} -ffunction-sections -fdata-sections
compiler.cpp.elf.cmd=arm-none-eabi-g++
compiler.c.elf.flags=-Os -Wl,--gc-sections
compiler.S.cmd=arm-none-eabi-gcc
compiler.S.flags=-c -g -x assembler-with-cpp
compiler.cpp.cmd=arm-none-eabi-g++
compiler.cpp.flags=-c -g -Os {compiler.warning_flags} -ffunction-sections -fdata-sections -fno-threadsafe-statics -fno-rtti -fno-exceptions
compiler.ar.cmd=arm-none-eabi-ar
compiler.ar.flags=rcs
compiler.objcopy.cmd=arm-none-eabi-objcopy
compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0
compiler.elf2hex.flags=-O binary
compiler.elf2hex.cmd=arm-none-eabi-objcopy
compiler.ldflags=
compiler.size.cmd=arm-none-eabi-size

compiler.driverlib.c.flags="-I{build.system.path}/driverlib" "-I{build.system.path}/inc" "-I{build.system.path}"
compiler.emt.c.flags="-I{build.core.path}/ti/runtime/wiring/" "-I{build.core.path}/ti/runtime/wiring/cc13xx"

# this can be overriden in boards.txt
build.extra_flags=-mcpu=cortex-m3 -mthumb -mfloat-abi=soft -mabi=aapcs -g -Dxdc_target_types__=gnu/targets/arm/std.h -Dxdc_target_name__=M3 -Dxdc_cfg__xheader__="configPkg/package/cfg/energia_pm3g.h" -DBOARD_{build.board} -Dxdc__nolocalstring=1

# These can be overridden in platform.local.txt
compiler.c.extra_flags={compiler.emt.c.flags} {compiler.driverlib.c.flags}
compiler.c.elf.extra_flags=-mcpu=cortex-m3 -mthumb -mfloat-abi=soft -mabi=aapcs
compiler.cpp.extra_flags={compiler.emt.c.flags} {compiler.driverlib.c.flags}
compiler.S.extra_flags=
compiler.ar.extra_flags=
compiler.elf2hex.extra_flags=

# USB Flags
# ---------
build.usb_flags=-DUSB_VID={build.vid} -DUSB_PID={build.pid} -DUSBCON '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'

# Default usb manufacturer will be replaced at compile time using
# numeric vendor ID if available or by board's specific value.
build.usb_manufacturer="Unknown"

# CC13xx compile patterns
# ---------------------

# TI's ino2ccp
build.ino2cpp.path={runtime.tools.ino2cpp.path}
build.ino2cpp.cmd.path={runtime.tools.ino2cpp.path}/ino2cpp.jar

recipe.hooks.sketch.prebuild.1.pattern="java" "-jar" "{build.ino2cpp.cmd.path}" -o "{build.path}/sketch/" -T "{build.ino2cpp.path}/templates/Variables.mk.template" -r "{build.ino2cpp.path}" -n {build.project_name} "{build.project_path}" msp432:MSP_EXP432P401R"
## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {build.extra_flags} {compiler.c.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DENERGIA={runtime.ide.version} -DENERGIA_{build.board} -DENERGIA_ARCH_{build.arch} {compiler.c.extra_flags} {compiler.emt.c.flags} {compiler.driverlib.c.flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {build.extra_flags} {compiler.cpp.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DENERGIA={runtime.ide.version} -DENERGIA_{build.board} -DENERGIA_ARCH_{build.arch} {compiler.cpp.extra_flags} {compiler.emt.c.flags} {compiler.driverlib.c.flags} {includes} "{source_file}" -o "{object_file}"

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.S.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DENERGIA={runtime.ide.version} -DENERGIA_{build.board} -DENERGIA_ARCH_{build.arch} {compiler.S.extra_flags} {compiler.emt.c.flags} {build.extra_flags} {compiler.driverlib.c.flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.cpp.elf.cmd}" -mcpu={build.mcu} -mthumb -nostartfiles {compiler.c.elf.flags} "-Wl,-u,main" "-Wl,-Map,{build.path}/{build.project_name}.map" {compiler.c.elf.extra_flags} -o "{build.path}/{build.project_name}.elf" {object_files} "-L{build.path}" "-L{build.core.path}" "-L{build.core.path}/ti/runtime/wiring/cc13xx" "-L{build.core.path}/ti/runtime/wiring/cc13xx/variants/{build.variant}" -Wl,--check-sections -Wl,--gc-sections "{build.path}/{archive_file}" "-Wl,-T{build.core.path}/{build.ldscript}" "-L{build.core.path}/gnu/targets/arm/libs/install-native/arm-none-eabi/lib/armv7-m" "{build.system.path}/driverlib/bin/gcc/driverlib.lib" -lstdc++ -lgcc -lc -lm -lnosys

## Create output (.bin file)
#recipe.objcopy.bin.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Save hex
recipe.output.tmp_file={build.project_name}.bin
recipe.output.save_file={build.project_name}.{build.variant}.bin

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=\.text\s+([0-9]+).*

# TI's DSLite
tools.dslite.upload.params.verbose=
tools.dslite.upload.params.quiet=
tools.dslite.path={runtime.tools.dslite-6.2.1.1624.path}
tools.dslite.config.path={path}
tools.dslite.cmd.path={path}/DebugServer/bin/DSLite
tools.dslite.upload.pattern={cmd.path} {upload.verbose} load -c "{config.path}/{build.variant}.ccxml" -f "{build.path}/{build.project_name}.elf"

